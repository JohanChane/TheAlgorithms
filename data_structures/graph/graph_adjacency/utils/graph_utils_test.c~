#include <stdio.h>
#include <stdlib.h>

#include "graph.h"
#include "graph_utils.h"
#include "../test_utils/utils.h"

static void testGraphUtils();

static void testGraphUtils() {
    Edge edge;

    // ## digraph
    Graph digraph = graphCreate(4);

    edge.src = 0;
    edge.dest = 1;
    edge.weight = 11;
    graphAddDirectedEdge(edge, digraph);

    edge.src = 0;
    edge.dest = 2;
    edge.weight = 10;
    graphAddDirectedEdge(edge, digraph);

    edge.src = 1;
    edge.dest = 3;
    edge.weight = 5;
    graphAddDirectedEdge(edge, digraph);

    edge.src = 2;
    edge.dest = 3;
    edge.weight = 12;
    graphAddDirectedEdge(edge, digraph);

    edge.src = 3;
    edge.dest = 1;
    edge.weight = 8;
    graphAddDirectedEdge(edge, digraph);

    printGraph(digraph);

    // ### is cyclic
    printf("### isCyclic\n");
    if (isCyclic(digraph)) {
        printf("digraph is cyclic.\n");
    }

    // ### topological sort
    int* topoSort = malloc(sizeof(int) * digraph->vertexNum);
    if (!topoSort) {
        perror("malloc topoSort failed");
        exit(EXIT_FAILURE);
    }

    if (topologicalSort(topoSort, digraph) < 0) {
        printf("Digraph is cyclic.\n");
    }
    printArray(topoSort, digraph->vertexNum);
    free(topoSort);

    graphDestroy(digraph);

    // ## graph
    Graph graph = graphCreate(4);

    edge.src = 0;
    edge.dest = 1;
    edge.weight = 11;
    graphAddUndirectedEdge(edge, graph);

    edge.src = 0;
    edge.dest = 2;
    edge.weight = 10;
    graphAddUndirectedEdge(edge, graph);

    edge.src = 1;
    edge.dest = 3;
    edge.weight = 5;
    graphAddUndirectedEdge(edge, graph);

    edge.src = 2;
    edge.dest = 3;
    edge.weight = 12;
    graphAddUndirectedEdge(edge, graph);

    printf("### isCyclicForUnDirected\n");
    if (isCyclicForUnDirected(graph)) {
        printf("graph is cyclic.\n");
    }

    graphDestroy(graph);
}

int main() {
    testGraphUtils();
}
